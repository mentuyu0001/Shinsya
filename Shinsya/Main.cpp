# include <Siv3D.hpp> // Siv3D v0.6.16

# include "stdafx.h"


/*
// メインスクリプト
*/

void Main()
{
	// 背景色を設定
	Scene::SetBackground(ColorF{ 0.8, 0.9, 1.0 });

	// -----------------------------------
	// 物理ワールドの準備
	// -----------------------------------
	// 重力加速度を設定 (Y軸プラス方向、つまり下向きに 98)
	P2World world{ 98*3 };

	// -----------------------------------
	// 物理オブジェクトの作成
	// -----------------------------------
	// ステージ生成
	Stage stage(world);

	// ゴールの生成
	Goal goal(world);

	// プレイヤーの生成
	Car car(world, Scene::Center(), 0.05, stage.getBodies());

	// タイマーの生成
	DisplayTimer timer;


	// 新しく追加：速度の最大値を定義
	int32 motorSpeed = 0;

	// ジャンプの強さ
	const double jumpImpulse = 100.0;


	while (System::Update())
	{
		// -----------------------------------
		// 物理ワールドの更新
		// -----------------------------------
		// 1フレーム分のシミュレーションを進める
		world.update();

		// -----------------------------------
		// 車の更新
		// -----------------------------------
		// 車を動かす
		car.setMotorSpeed(motorSpeed);

		// -----------------------------------
		// タイマーの更新
		// -----------------------------------
		// 時間を加算する
		timer.addTime();

		// -----------------------------------
		// 入力に応じて力を加える
		// -----------------------------------
		// 左クリックされたら、左方向に力を加える
		if (MouseL.pressed() || KeyLeft.pressed())
		{
			motorSpeed = -500;
		}

		// 右クリックされたら、右方向に力を加える
		if (MouseR.pressed() || KeyRight.pressed())
		{
			motorSpeed = 500;
		}

		// 何も押されてない間はmotorSpeedを0にする
		if (!MouseR.pressed() && !KeyRight.pressed() && !MouseL.pressed() && !KeyLeft.pressed())
		{
			motorSpeed = 0;
		}

		//------------------------------------
		// ジャンプ処理
		//------------------------------------
		// スペースキーが押された
		if (KeySpace.down())
		{
			car.jump(jumpImpulse);
		}

		//------------------------------------
		// ゴール判定
		//------------------------------------
		if (goal.GoalChecker(car.getBody()))
		{
			timer.Goal();
		}


		// -----------------------------------
		// 描画
		// -----------------------------------
		// ステージの描画
		stage.draw();
		// ゴールの描画
		goal.draw();
		// プレイヤーの描画
		car.draw();
		// タイマーの描画
		timer.draw();
	}
}

//
// - Debug ビルド: プログラムの最適化を減らす代わりに、エラーやクラッシュ時に詳細な情報を得られます。
//
// - Release ビルド: 最大限の最適化でビルドします。
//
// - [デバッグ] メニュー → [デバッグの開始] でプログラムを実行すると、[出力] ウィンドウに詳細なログが表示され、エラーの原因を探せます。
//
// - Visual Studio を更新した直後は、プログラムのリビルド（[ビルド]メニュー → [ソリューションのリビルド]）が必要な場合があります。
//
